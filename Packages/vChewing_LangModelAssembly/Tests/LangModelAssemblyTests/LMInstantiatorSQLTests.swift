// (c) 2021 and onwards The vChewing Project (MIT-NTL License).
// ====================
// This code is released under the MIT license (SPDX-License-Identifier: MIT)
// ... with NTL restriction stating that:
// No trademark license is granted to use the trade names, trademarks, service
// marks, or product names of Contributor, except as required to fulfill notice
// requirements defined in MIT License.

import Foundation
import LMAssemblyMaterials4Tests
import XCTest

@testable import LangModelAssembly

private let strCakeKey: [String] = ["„Ñâ„Ñ¢Àã", "„Ñç„Ñ†"]
private let strHaninSymbolMenuKey: [String] = ["_punctuation_list"]
private let strZhongKey: [String] = ["„Ñì„Ñ®„Ñ•"]
private let strBoobsKey: [String] = ["„Ñã„Ñü", "„Ñã„Ñü"]
private let expectedReverseLookupResults: [String] = [
  "„Ñè„ÑúÀã", "„Ñè„ÑúÀô", "„Ñè„ÑúÀä", "„Ñè„Ñ®„Ñõ", "„Ñè„Ñ®Àä",
  "„Ñè„Ñ®„ÑõÀô", "„Ñè„Ñ®„ÑõÀä", "„Ñè„Ñ®„ÑõÀã", "„Ñè„Ñ¢Àã", "„Ñâ„Ñ®„Ñ•",
]

// MARK: - LMInstantiatorSQLTests

final class LMInstantiatorSQLTests: XCTestCase {
  func testSQL() throws {
    let instance = LMAssembly.LMInstantiator(isCHS: true)
    XCTAssertTrue(!sqlTestCoreLMData.isEmpty)
    XCTAssertTrue(LMAssembly.LMInstantiator.connectToTestSQLDB(sqlTestCoreLMData))
    instance.setOptions { config in
      config.isCNSEnabled = false
      config.isSymbolEnabled = false
    }
    XCTAssertEqual(
      instance.unigramsFor(keyArray: strCakeKey).description,
      "[(„Ñâ„Ñ¢Àã-„Ñç„Ñ†,ËõãÁ≥ï,-4.073)]"
    )
    XCTAssertEqual(
      instance.getHaninSymbolMenuUnigrams()[1].description,
      "(_punctuation_list,Ôºå,-9.9)"
    )
    XCTAssertEqual(
      instance.unigramsFor(keyArray: strBoobsKey).description,
      "[(„Ñã„Ñü-„Ñã„Ñü,„Ñã„Ñü„Ñã„Ñü,-1.0)]"
    )
    instance.setOptions { config in
      config.isCNSEnabled = true
      config.isSymbolEnabled = true
    }
    XCTAssertEqual(
      instance.unigramsFor(keyArray: strCakeKey).last?.description,
      "(„Ñâ„Ñ¢Àã-„Ñç„Ñ†,üßÅ,-13.000001)"
    )
    XCTAssertEqual(
      instance.getHaninSymbolMenuUnigrams()[1].description,
      "(_punctuation_list,Ôºå,-9.9)"
    )
    XCTAssertEqual(instance.unigramsFor(keyArray: strZhongKey).count, 21)
    XCTAssertEqual(
      instance.unigramsFor(keyArray: strBoobsKey).last?.description,
      "(„Ñã„Ñü-„Ñã„Ñü,‚òâ‚òâ,-13.0)"
    )
    // ÂÜçÊ∏¨Ë©¶ÂèçÊü•„ÄÇ
    XCTAssertEqual(
      LMAssembly.LMInstantiator.getFactoryReverseLookupData(with: "Âíå"),
      expectedReverseLookupResults
    )
    LMAssembly.LMInstantiator.disconnectSQLDB()
  }

  func testCNSMask() throws {
    let instance = LMAssembly.LMInstantiator(isCHS: false)
    XCTAssertTrue(LMAssembly.LMInstantiator.connectToTestSQLDB(sqlTestCoreLMData))
    instance.setOptions { config in
      config.isCNSEnabled = false
      config.isSymbolEnabled = false
      config.filterNonCNSReadings = false
    }
    XCTAssertEqual(
      instance.unigramsFor(keyArray: ["„Ñ®„Ñü"]).first(where: { $0.value == "Âç±" })?.description,
      "(„Ñ®„Ñü,Âç±,-5.287)"
    )
    XCTAssertEqual(
      instance.unigramsFor(keyArray: ["„Ñ®„ÑüÀä"]).first(where: { $0.value == "Âç±" })?.description,
      "(„Ñ®„ÑüÀä,Âç±,-5.287)"
    )
    instance.setOptions { config in
      config.filterNonCNSReadings = true
    }
    XCTAssertEqual(
      instance.unigramsFor(keyArray: ["„Ñ®„Ñü"]).first(where: { $0.value == "Âç±" }),
      nil
    )
    XCTAssertEqual(
      instance.unigramsFor(keyArray: ["„Ñ®„ÑüÀä"]).first(where: { $0.value == "Âç±" })?.description,
      "(„Ñ®„ÑüÀä,Âç±,-5.287)"
    )
  }
}
